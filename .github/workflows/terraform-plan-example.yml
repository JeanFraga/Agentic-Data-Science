# Example GitHub Actions Workflow for Terraform with GCS Plan Storage
# This demonstrates best practices for storing tfplan files in GCS buckets

name: Terraform Plan and Apply

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]

env:
  TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID }}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      plan-id: ${{ steps.plan.outputs.plan-id }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ vars.GCP_PROJECT_ID }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.GCP_PROJECT_ID }}-terraform-state"
          
    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      run: |
        # Generate unique plan ID
        PLAN_ID="plan-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
        echo "plan-id=${PLAN_ID}" >> $GITHUB_OUTPUT
        
        # Create plan file
        terraform plan -out="${PLAN_ID}.tfplan"
        
        # Upload plan to GCS bucket
        gsutil cp "${PLAN_ID}.tfplan" "gs://${{ vars.GCP_PROJECT_ID }}-terraform-plans/${{ github.ref_name }}/${PLAN_ID}.tfplan"
        
        # Remove local plan file for security
        rm "${PLAN_ID}.tfplan"
        
        echo "âœ… Plan stored in GCS: gs://${{ vars.GCP_PROJECT_ID }}-terraform-plans/${{ github.ref_name }}/${PLAN_ID}.tfplan"
        
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan ðŸ“‹
          
          **Plan ID:** \`${{ steps.plan.outputs.plan-id }}\`
          **Branch:** \`${{ github.ref_name }}\`
          **GCS Path:** \`gs://${{ vars.GCP_PROJECT_ID }}-terraform-plans/${{ github.ref_name }}/${{ steps.plan.outputs.plan-id }}.tfplan\`
          
          Plan has been generated and stored securely in GCS bucket.
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ vars.GCP_PROJECT_ID }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.GCP_PROJECT_ID }}-terraform-state"
          
    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        PLAN_ID="${{ needs.terraform-plan.outputs.plan-id }}"
        
        # Download plan from GCS bucket
        gsutil cp "gs://${{ vars.GCP_PROJECT_ID }}-terraform-plans/${{ github.ref_name }}/${PLAN_ID}.tfplan" "${PLAN_ID}.tfplan"
        
        # Apply the plan
        terraform apply "${PLAN_ID}.tfplan"
        
        # Clean up plan files after successful apply
        rm "${PLAN_ID}.tfplan"
        gsutil rm "gs://${{ vars.GCP_PROJECT_ID }}-terraform-plans/${{ github.ref_name }}/${PLAN_ID}.tfplan"
        
        echo "âœ… Plan applied and cleaned up successfully"

  cleanup-old-plans:
    name: 'Cleanup Old Plans'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    schedule:
      - cron: '0 2 * * 0'  # Weekly cleanup on Sundays at 2 AM
      
    steps:
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ vars.GCP_PROJECT_ID }}
        
    - name: Cleanup Old Plans
      run: |
        # Note: This is handled automatically by GCS lifecycle policies
        # But you can add manual cleanup logic here if needed
        echo "Plan cleanup is handled by GCS lifecycle policies (30 days retention)"
        
        # Optional: List current plans for monitoring
        echo "Current plans in bucket:"
        gsutil ls -l "gs://${{ vars.GCP_PROJECT_ID }}-terraform-plans/**" || echo "No plans found"
